import { FormikBag } from 'formik';
import React, { useState, useCallback } from 'react';
import { defineMessages } from 'react-intl';

import { WizardProps } from '~core/Wizard';

import { mergePayload } from '~utils/actions';
import Button from '~core/Button';
import Heading from '~core/Heading';
import Icon from '~core/Icon';
import { ActionForm, Select } from '~core/Fields';
import { ActionTypes } from '~redux/index';

import styles from './StepGanache.css';

// This file is generated by ganache, so it has to run before this file is compiled
import ganacheAccounts from '../../../../../lib/colonyNetwork/ganache-accounts.json';

const MSG = defineMessages({
  heading: {
    id: 'users.ConnectWalletWizard.StepGanache.heading',
    defaultMessage: "You're connected using a local ganache account",
  },
  subHeading: {
    id: 'users.ConnectWalletWizard.StepGanache.subHeading',
    defaultMessage: 'Would you like to access Colony with that?',
  },
  errorHeading: {
    id: 'users.ConnectWalletWizard.StepGanache.errorHeading',
    defaultMessage: "Oops we couldn't load from TrufflePig",
  },
  errorOpenTrufflepig: {
    id: 'users.ConnectWalletWizard.StepGanache.errorOpenTrufflepig',
    defaultMessage: 'We could not connect to TrufflePig',
  },
  buttonAdvance: {
    id: 'users.ConnectWalletWizard.StepGanache.button.advance',
    defaultMessage: 'Continue',
  },
  buttonBack: {
    id: 'users.ConnectWalletWizard.StepGanache.button.back',
    defaultMessage: 'Back',
  },
  buttonRetry: {
    id: 'users.ConnectWalletWizard.StepGanache.button.retry',
    defaultMessage: 'Try Again',
  },
  accountIndex: {
    id: 'users.ConnectWalletWizard.StepGanache.select.accountIndex',
    defaultMessage: 'Account index',
  },
});

interface FormValues {
  privateKey: string;
}

type Props = WizardProps<FormValues>;

const accounts = Object.entries(ganacheAccounts.private_keys).map(
  ([address, privateKey]) => ({
    value: privateKey,
    label: address,
  }),
);

const displayName = 'users.ConnectWalletWizard.StepGanache';

const StepGanache = ({ resetWizard, wizardForm, wizardValues }: Props) => {
  const [privateKey, setPrivateKey] = useState<string>();

  const transform = useCallback(mergePayload({ ...wizardValues, privateKey }), [
    wizardValues,
    privateKey,
  ]);

  return (
    <ActionForm
      submit={ActionTypes.WALLET_CREATE}
      success={ActionTypes.USER_CONTEXT_SETUP_SUCCESS}
      error={ActionTypes.WALLET_CREATE_ERROR}
      onError={(
        errorMessage: string,
        { setStatus }: FormikBag<object, FormValues>,
      ) => {
        setStatus({ error: MSG.errorOpenTrufflepig });
      }}
      transform={transform}
      {...wizardForm}
    >
      {({ isSubmitting }) => (
        <main>
          <div className={styles.content}>
            <div className={styles.iconContainer}>
              <Icon
                name="wallet"
                title="wallet"
                appearance={{ size: 'medium' }}
              />
            </div>
            <Heading
              text={MSG.heading}
              appearance={{ size: 'medium', margin: 'none' }}
            />
            <Heading text={MSG.subHeading} appearance={{ size: 'medium' }} />
            <Select
              label={MSG.accountIndex}
              name="privateKey"
              onChange={(value) => setPrivateKey(value)}
              options={accounts}
            />
          </div>
          <div className={styles.actions}>
            <Button
              text={MSG.buttonBack}
              appearance={{ theme: 'secondary', size: 'large' }}
              onClick={resetWizard}
            />
            <Button
              text={MSG.buttonAdvance}
              appearance={{ theme: 'primary', size: 'large' }}
              type="submit"
              loading={isSubmitting}
            />
          </div>
        </main>
      )}
    </ActionForm>
  );
};

StepGanache.displayName = displayName;

export default StepGanache;
